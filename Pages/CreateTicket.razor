@page "/createticket"
@attribute [Authorize]
@using Client.Services
@using Client.Models

@inject IEntityService EntityService
@inject ILocalStorageService LocalStorage
@inject IHttpService HttpService
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create a Ticket</PageTitle>

<h1>Create a Ticket</h1>

<EditForm EditContext="@EditContext" class="row p-3" OnSubmit="@HandleSubmit">
    <div class="col-md-12 mb-3">
        <label for="Name">Title</label>
        <InputText id="Name" @bind-Value="ticketDTO.Name" class="form-control" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Description">Description</label>
        <InputTextArea id="Description" @bind-Value="ticketDTO.Description" class="form-control" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Project">Project</label>
        <br />
    <InputSelect @bind-Value="ticketDTO.Project">
        @foreach (var value in EntityService.ProjectsWithUsers)
        {
            <option>@value.name.ToString()</option>
        }
    </InputSelect>
    </div>
    <div class="col-md-12 mb-3">
        <label for="UserAssigned">Assign User:</label>
        <br />
        @if(EntityService.Users != null)
        {
            
        
        <InputSelect id="UserAssigned" @bind-Value="ticketDTO.UserAssigned">
        @foreach (UserDTO user in EntityService.Users)
        {
            <option>@user.username.ToString()</option>
        }
        </InputSelect>
        } 
        else {
            <InputText id="UserAssigned" @bind-Value="ticketDTO.UserAssigned"></InputText>
        }
    
    </div>
    
        <button type="submit" class="btn btn-primary btn-large">Create Ticket</button>
    <ValidationSummary />
</EditForm>

@code {
    private CreateTicketDTO ticketDTO = new CreateTicketDTO();
    private EditContext EditContext;
    private string currentUserName;


    protected async override void OnInitialized()
    {
        EditContext = new EditContext(ticketDTO);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserName = await LocalStorage.GetItemAsync<string>("usernameFromClaims");

        await EntityService.GetProjects();
        await EntityService.GetUsers();
        StateHasChanged();
    }

    private void HandleSubmit()
    {
            ticketDTO.UserCreated = currentUserName;
            EntityService.CreateTicket(ticketDTO);
            ticketDTO.Name = string.Empty;
            ticketDTO.Description = string.Empty;
            ticketDTO.Project = string.Empty;
            ticketDTO.UserAssigned = string.Empty;
    }
}