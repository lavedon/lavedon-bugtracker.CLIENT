@page "/tickets"
@using Client.Services
@using Client.Models
@attribute [Authorize]
@inject IEntityService EntityService
@inject ILocalStorageService LocalStorage

<PageTitle>List of Tickets</PageTitle>

<Dialog Show=@showDialog
        OnOk="DialogOkHandler"><Title>@ticketTitle</Title>
        <Body><CreateTicketForm CurrentUserAssigned=@ticketAssignedTo CurrentProjectAssigned=@ticketProject 
        PassedUserCreated=@ticketCreatedBy ButtonText="Edit Ticket" 
        PassedTitle=@ticketTitle PassedDescription=@ticketDescription 
        PassedTicketId=@ticketId SelectEditOrCreate=@CreateTicketForm.EditOrCreate.Edit
        PassedProjectId=@projectId
        PassedUserCreatedId=@userCreatedId PassedAssignedUserId=@userAssignedId
        /></Body>
    </Dialog>


@if(!string.IsNullOrEmpty(currentUserName))
{
    <h1>Welcome @currentUserName!</h1>
}

<h4>List of Tickets</h4>
<div class="col-md-12 mb-3">
@if (EntityService.Tickets == null)
{
    <h1><em>Loading...</em></h1>
}
else {
<table class="table">
   <thead>
           <th>Ticket Name</th>
           <th>Description</th>
           <th>Project</th>
           <th>Assigned To</th>
           <th>Ticket Created By</th>
   </thead> 
   <tbody>
   @foreach(var ticket in EntityService.Tickets) {
       <tr>
           <td>@ticket.Name</td>
           <td>@ticket.Description</td>
           <td>@ticket.Project.Name</td>
           <td>@ticket.UserAssigned.Username</td>
           <td>@ticket.UserCreated.Username <button class="btn btn-outline-primary btn-sm" title="Edit Ticket" @onclick="@(()=>OpenDialog(ticket))">
                   <span class="oi oi-pencil"></span></button>
               <button class="btn btn-outline-danger btn-sm" title="Delete ticket" @onclick="@(()=>DeleteTicket(ticket))">
                   <span class="oi oi-trash"></span></button>
            </td>
       </tr>
   }
    </tbody>
</table>
}
</div>
<button class="btn btn-primary" @onclick="EntityService.GetUsers">Refresh List of Tickets</button>

@code {
    private bool showDialog = false;
    private string currentUserName = string.Empty;
    public string ticketTitle = string.Empty;
    public string ticketDescription = string.Empty;
    public string? ticketProject = string.Empty;
    public string? ticketAssignedTo = string.Empty;
    public string ticketCreatedBy = string.Empty;
    public int ticketId = 0;
    public int projectId = 0;
    public int userCreatedId = 0;
    public int userAssignedId = 0;

    private void OpenDialog(TicketDTO ticket)
    {
        ticketId = ticket.Id;
        Console.WriteLine("The selected ticket project id is:");
        Console.WriteLine(ticket.ProjectId);
        projectId = ticket.ProjectId;
        userCreatedId = (int) ticket.UserCreatedId!;
        userAssignedId = (int) ticket.UserAssignedId!;

        ticketTitle = ticket.Name;
        ticketDescription = ticket.Description;
        ticketProject = ticket.Project.Name!;
        ticketAssignedTo = ticket.UserAssigned.Username;
        ticketCreatedBy = ticket.UserCreated.Username!;
        
        showDialog = true;
    }

    private async Task DeleteTicket(TicketDTO ticket)
    {
        await EntityService.DeleteTicket(ticket.Id);
        await EntityService.GetTickets();
        StateHasChanged();
    }

    protected async override void OnInitialized() 
    {
        currentUserName = await LocalStorage.GetItemAsync<string>("usernameFromClaims");
        await this.EntityService.GetTickets();
        StateHasChanged();
    }

    private async Task DialogOkHandler(MouseEventArgs e)
    {
        showDialog = false;
        await this.EntityService.GetTickets();
        StateHasChanged();
    }

    private void CloseOnFormSubmit(object sender, EventArgs e) {
        
        showDialog = false;
        StateHasChanged();
        
    }
}