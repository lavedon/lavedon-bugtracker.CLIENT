@using Client.Services
@using Client.Models

@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration
@inject IEntityService EntityService

@namespace Client.Shared

<div class="col-md-12">
<EditForm EditContext="@EditContext" class="row p-3" OnSubmit="@HandleSubmit">
    <div class="col-md-12 mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="projectDTO.Name" class="form-control" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Description">Description</label>
        <InputTextArea id="Description" @bind-Value="projectDTO.Description" class="form-control" />
    </div>
        <button type="submit" class="btn btn-primary btn-large">@buttonText</button>
    <ValidationSummary />
</EditForm>
</div>

@code {
    public enum EditOrCreate {
        Create,
        Edit
    }

    [Parameter] public EventCallback<MouseEventArgs> UpdateProjects { get; set; }
    [Parameter] public EditOrCreate SelectEditOrCreate { get; set; } = EditOrCreate.Create;
    [Parameter] public string PassedName { get; set; } = string.Empty;
    [Parameter] public string PassedDescription { get; set; } = string.Empty;
    [Parameter] public int PassedId { get; set; } = 0;

    private ProjectDTO projectDTO = new ProjectDTO();
    private ProjectWithUserDTO projectWithUserDTO = new ProjectWithUserDTO();

    private EditContext EditContext;
    private string currentUserName = string.Empty;
    private string buttonText { get; set; } = "Create Project";

    protected async override void OnInitialized()
    {
        EditContext = new EditContext(projectDTO);
        if (SelectEditOrCreate == EditOrCreate.Edit)
        {
            buttonText = "Edit Project";
        }

        currentUserName = await LocalStorage.GetItemAsync<string>("usernameFromClaims");
        EditContext = new EditContext(projectDTO);
        projectDTO.Name = PassedName;
        projectDTO.Description = PassedDescription;
        projectDTO.Id = PassedId;

        Console.WriteLine("Inside CreateProjectForm's OnInitialized()");
        Console.WriteLine("The current project's ID is: ", projectDTO.Id);
        StateHasChanged();
    }

    private async void HandleSubmit()
    {
        if (SelectEditOrCreate == EditOrCreate.Create)
        {
            if (EditContext.Validate())
            {
                Console.WriteLine("CreatedProjectForm Validated EditContext OK");
                projectDTO = EditContext.Model as ProjectDTO;
                projectDTO.UserCreated = currentUserName;

                await EntityService.CreateProject(projectDTO);

                projectDTO.Name = string.Empty;
                projectDTO.Description = string.Empty;
            }
            else
            {
                Console.WriteLine("Form is Invalid...");
            }
            await UpdateProjects.InvokeAsync();
        }

        if (SelectEditOrCreate == EditOrCreate.Edit)
        {
                projectDTO = new ProjectDTO();
                if (EditContext.Model is not null)
                {
                    projectDTO = EditContext.Model as ProjectDTO;
                } 
                else {
                    return;
                }

                projectWithUserDTO.id = (int) projectDTO.Id;
                projectWithUserDTO.name = projectDTO.Name ?? string.Empty;
                projectWithUserDTO.description = projectDTO.Description ?? string.Empty;

                await EntityService.UpdateProject(projectWithUserDTO);

                await UpdateProjects.InvokeAsync();
        }
    }
}